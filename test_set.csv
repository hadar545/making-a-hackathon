0
"
if __name__ == ""__main__"":
    parser = argparse.ArgumentParser()
"
"    parser.add_argument(""json"", help=""JSON transcription file"")
    parser.add_argument(
        ""--mictype"",
"
"        choices=[""ref"", ""worn"", ""u01"", ""u02"", ""u03"", ""u04"", ""u05"", ""u06""],
"
"        help=""Type of microphones"",
"
"    )
"
"    args = parser.parse_args()

"
"    # logging info
    log_format = ""%(asctime)s (%(module)s:%(lineno)d) %(levelname)s:%(message)s""
    logging.basicConfig(level=logging.INFO, format=log_format)

    logging.debug(""reading %s"", args.json)
"
"    with open(args.json, ""rt"", encoding=""utf-8"") as f:
        j = json.load(f)

"
"    for x in j:
        if ""[redacted]"" not in x[""words""]:
            session_id = x[""session_id""]
            speaker_id = x[""speaker""]
"
"            if args.mictype == ""ref"":
                mictype = x[""ref""]
            elif args.mictype == ""worn"":
                mictype = ""original""
            else:
"
"                mictype = args.mictype.upper()  # convert from u01 to U01

            # add location tag for scoring (only for dev and eval sets)
            if ""location"" in x.keys():
                location = x[""location""].upper()
            else:
                location = ""NOLOCATION"""
